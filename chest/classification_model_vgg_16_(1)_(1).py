# -*- coding: utf-8 -*-
"""Classification_model_VGG_16 (1) (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dJ0znLD-JUchARqfsfa-zY9mxg1hkdSh
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import random
import tensorflow as tf
import time
import numpy as np
from tqdm import tqdm
from vgg16 import VGG16
from tensorflow.keras.preprocessing import image
from imagenet_utils import preprocess_input, decode_predictions
from keras.layers import Dense, Activation, Flatten
from keras.layers import merge,Input
from sklearn.utils import shuffle
from keras.models import Model
from keras.utils import np_utils
from sklearn.model_selection import train_test_split

"""# New Section

# New Section

Add Google drive
Add vgg16.py
Add imagenet_utils.py
"""

seed = 80
np.random.seed = seed
# original shape = 512x512
NAME = "classification_1-{}".format(int(time.time()))

TRAINING_DIR = "/content/drive/My Drive/COVID_PENUMONIA_CLASSIFICATION/Dataset/"

data_dir_list = os.listdir(TRAINING_DIR)

"""Preprocessing"""

img_data_list = []

for dataset in data_dir_list:
    img_list = os.listdir(TRAINING_DIR+dataset+'/')
    print('Loading the images of dataset - '+ '{}\n'.format(dataset))
    for img in tqdm(img_list):
        img_path = TRAINING_DIR+dataset+'/'+img
        img = image.load_img(img_path, target_size=(224,224))
        x = image.img_to_array(img)
        x = np.expand_dims(x, axis=0)
        x = preprocess_input(x)
        img_data_list.append(x)

img_data = np.array(img_data_list)
img_data = np.rollaxis(img_data,1,0)
img_data = img_data[0]
img_data = img_data.astype('int32')
img_data = np.abs(img_data)
img_data = img_data/255 # can be removed if accuracy is not good
print(img_data.shape)

# preview
import matplotlib.pyplot as plt
plt.imshow(img_data[200])
plt.show()

num_classes = 1
num_of_samples = img_data.shape[0]
labels = np.ones((num_of_samples), dtype = 'int32')

labels[:125] = 1
labels[125:] = 0

names = ['Covid-19','Pneumonia']

Y = labels

x,y = shuffle(img_data,Y, random_state=2)

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.1, random_state = 2)

"""model --> Transfer learning """

image_input = Input(shape=(224,224,3))

model = VGG16(input_tensor=image_input, include_top = True, weights = 'imagenet')

model.summary()

last_layer = model.get_layer('fc2').output
x = Dense(128, activation='relu', name='fc3')(last_layer)
x = Dense(128, activation='relu', name='fc4')(x)
out = Dense(num_classes, activation = 'sigmoid', name = 'output')(x)
custom_vgg_model = Model(image_input, out)
custom_vgg_model.summary()

for layer in custom_vgg_model.layers[:-3]:
    layer.trainable = False

custom_vgg_model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics=['accuracy'])

custom_vgg_model.summary()

"""Training"""

callbacks = [
    #tf.keras.callbacks.EarlyStopping(patience=3, monitor='val_loss'),
    #tf.keras.callbacks.TensorBoard(log_dir='logs\{}'.format(NAME)),
    #tf.keras.callbacks.ModelCheckpoint('classification_model_1.h5', save_best_only=True)
]

custom_vgg_model.fit(X_train, y_train, batch_size=10, epochs=16, verbose=1, validation_data = (X_test, y_test), callbacks=callbacks)

